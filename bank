Go.cmd:
@echo off
if .%USERDOMAIN% == .SavasPC goto :P52s

REM MIF kompiuteris
path C:\PROGRA~2\Dev-Cpp\MinGW64\bin\;%path%
mingw32-make.exe
goto :toliau

:savasPC
make

:toliau
echo 500 modeliavimo laikas > params.txt
echo 4   paprastų klientų kasininkų skaičius >> params.txt
echo 2   VIP klientų kasininkų skaičius >> params.txt
echo 40  paprasto kliento atėjimo tikimybė (%) >> params.txt
echo 10  VIP kliento atėjimo tikimybė (%) >> params.txt
echo 5   paprasto kliento aptarnavimo laikas >> params.txt
echo 3   VIP kliento aptarnavimo laikas >> params.txt
VIP_bank.exe params.txt -rnd 50 > result1.txt

echo 485 modeliavimo laikas > VIP_bank.cfg
echo 3 paprastų klientų kasininkų skaičius >> VIP_bank.cfg
echo 3 VIP klientų kasininkų skaičius >> VIP_bank.cfg
echo 30 paprasto kliento atėjimo tikimybė (%) >> VIP_bank.cfg
echo 20 VIP kliento atėjimo tikimybė (%) >> VIP_bank.cfg
echo 4 paprasto kliento aptarnavimo laikas >> VIP_bank.cfg
echo 5 VIP kliento aptarnavimo laikas >> VIP_bank.cfg
VIP_bank.exe > result2.txt

Makefile:
VIP_bank.exe: main.c VIP_bank.o queue.c priorityQueue.c
		gcc -std=c99 -o VIP_bank.exe main.c VIP_bank.o queue.c priorityQueue.c

VIP_bank.o: VIP_bank.c VIP_bank.h queue.h priorityQueue.h
		gcc -std=c99 -c VIP_bank.c

main.c:
#include "VIP_bank.h"
#include <stdio.h>

int main() {
    SimulationParams params = {
        .total_clerks = 4,
        .normal_clerks = 3,
        .vip_clerks = 1,
        .p_normal = 0.8,
        .t_normal = 10.0,
        .t_vip = 5.0
    };

    printf("Programa pradedama...\n");
    
    printf("Vykdomas Procesas 1...\n");
    SimulationResults res1 = runSimulation(PROCESS_1, params);
    
    printf("Vykdomas Procesas 2...\n");
    SimulationResults res2 = runSimulation(PROCESS_2, params);

    printf("\nProcesas 1 rezultatai:\n");
    printf("Prastovos laikas: %.2f min\n", res1.total_downtime);
    printf("Viršvalandžiai: %.2f min\n", res1.total_overtime);
    printf("Vid. normalus laukimas: %.2f min\n", res1.avg_normal_wait);
    printf("Maks. VIP laukimas: %.2f min\n", res1.max_vip_wait);

    printf("\nProcesas 2 rezultatai:\n");
    printf("Prastovos laikas: %.2f min\n", res2.total_downtime);
    printf("Viršvalandžiai: %.2f min\n", res2.total_overtime);
    printf("Vid. normalus laukimas: %.2f min\n", res2.avg_normal_wait);
    printf("Maks. VIP laukimas: %.2f min\n", res2.max_vip_wait);

    return 0;
}

priorityQueue.c:
#include "priorityQueue.h"
#include <stdlib.h>

PriorityQueue* createPriorityQueue(int capacity) {
    PriorityQueue* q = (PriorityQueue*)malloc(sizeof(PriorityQueue));
    q->items = (PriorityItem*)malloc(sizeof(PriorityItem) * capacity);
    q->capacity = capacity;
    q->size = 0;
    return q;
}

void freePriorityQueue(PriorityQueue* q) {
    free(q->items);
    free(q);
}

static void swap(PriorityItem* a, PriorityItem* b) {
    PriorityItem temp = *a;
    *a = *b;
    *b = temp;
}

static void heapifyUp(PriorityQueue* q, int index) {
    while (index > 0) {
        int parent = (index - 1) / 2;
        if (q->items[index].priority >= q->items[parent].priority) break;
        swap(&q->items[index], &q->items[parent]);
        index = parent;
    }
}

static void heapifyDown(PriorityQueue* q, int index) {
    while (1) {
        int left = 2 * index + 1;
        int right = 2 * index + 2;
        int smallest = index;

        if (left < q->size && q->items[left].priority < q->items[smallest].priority)
            smallest = left;
        if (right < q->size && q->items[right].priority < q->items[smallest].priority)
            smallest = right;
        if (smallest == index) break;

        swap(&q->items[index], &q->items[smallest]);
        index = smallest;
    }
}

bool enqueuePriority(PriorityQueue* q, PriorityItem item) {
    if (q->size >= q->capacity) return false;
    q->items[q->size] = item;
    heapifyUp(q, q->size);
    q->size++;
    return true;
}

PriorityItem dequeuePriority(PriorityQueue* q) {
    PriorityItem item = q->items[0];
    q->size--;
    q->items[0] = q->items[q->size];
    heapifyDown(q, 0);
    return item;
}

bool isPriorityQueueEmpty(PriorityQueue* q) {
    return q->size == 0;
}

PriorityItem peekPriority(PriorityQueue* q) {
    return q->items[0];
}

priorityQueue.h:
#ifndef PRIORITY_QUEUE_H
#define PRIORITY_QUEUE_H

#include <stdbool.h>

typedef struct {
    int id;
    int priority;  // 0 - aukščiausias prioritetas (VIP)
    double arrival_time;
    double service_time;
} PriorityItem;

typedef struct {
    PriorityItem* items;
    int capacity;
    int size;
} PriorityQueue;

PriorityQueue* createPriorityQueue(int capacity);
void freePriorityQueue(PriorityQueue* q);
bool enqueuePriority(PriorityQueue* q, PriorityItem item);
PriorityItem dequeuePriority(PriorityQueue* q);
bool isPriorityQueueEmpty(PriorityQueue* q);
PriorityItem peekPriority(PriorityQueue* q);

#endif


queue.c:
#include "queue.h"
#include <stdlib.h>

Queue* createQueue(int capacity) {
    Queue* q = (Queue*)malloc(sizeof(Queue));
    q->items = (QueueItem*)malloc(sizeof(QueueItem) * capacity);
    q->capacity = capacity;
    q->front = 0;
    q->rear = -1;
    q->size = 0;
    return q;
}

void freeQueue(Queue* q) {
    free(q->items);
    free(q);
}

bool enqueue(Queue* q, QueueItem item) {
    if (q->size >= q->capacity) return false;
    q->rear = (q->rear + 1) % q->capacity;
    q->items[q->rear] = item;
    q->size++;
    return true;
}

QueueItem dequeue(Queue* q) {
    QueueItem item = q->items[q->front];
    q->front = (q->front + 1) % q->capacity;
    q->size--;
    return item;
}

bool isQueueEmpty(Queue* q) {
    return q->size == 0;
}

QueueItem peek(Queue* q) {
    return q->items[q->front];
}

queue.h:
#ifndef QUEUE_H
#define QUEUE_H

#include <stdbool.h>

typedef struct {
    int id;
    double arrival_time;
    double service_time;
} QueueItem;

typedef struct {
    QueueItem* items;
    int capacity;
    int front;
    int rear;
    int size;
} Queue;

Queue* createQueue(int capacity);
void freeQueue(Queue* q);
bool enqueue(Queue* q, QueueItem item);
QueueItem dequeue(Queue* q);
bool isQueueEmpty(Queue* q);
QueueItem peek(Queue* q);

#endif

VIP_bank.c:
#include "VIP_bank.h"
#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#include <time.h>
#include <limits.h>

#define SIMULATION_TIME 480  // 8 valandos minutėmis
#define MAX_ITERATIONS 1000000

double exponentialRandom(double mean) {
    double u = (rand() + 1.0) / (RAND_MAX + 2.0);
    return -mean * log(1 - u);
}

SimulationResults runSimulation(ProcessType process, SimulationParams params) {
    srand((unsigned int)time(NULL) ^ (process << 16));
    SimulationResults results = {0};
    
    if (process == PROCESS_1) {
        PriorityQueue* queue = createPriorityQueue(1000);
        double* clerk_busy_until = calloc(params.total_clerks, sizeof(double));
        
        double current_time = 0;
        int normal_clients_served = 0;
        int vip_clients_served = 0;
        double total_normal_wait = 0;
        double max_vip_wait = 0;
        int iterations = 0;

        while (iterations < MAX_ITERATIONS) {
            iterations++;
            
            // Generuoti naujus klientus
            if (current_time <= SIMULATION_TIME) {
                double arrival_interval = exponentialRandom(2.0);
                current_time += arrival_interval;
                
                if (current_time <= SIMULATION_TIME) {
                    if ((rand() / (RAND_MAX + 1.0)) < params.p_normal) {
                        PriorityItem normal = {
                            .id = iterations,
                            .priority = 1,
                            .arrival_time = current_time,
                            .service_time = exponentialRandom(params.t_normal)
                        };
                        enqueuePriority(queue, normal);
                    } else {
                        PriorityItem vip = {
                            .id = iterations,
                            .priority = 0,
                            .arrival_time = current_time,
                            .service_time = exponentialRandom(params.t_vip)
                        };
                        enqueuePriority(queue, vip);
                    }
                }
            }
            
            // Aptarnauti klientus
            for (int i = 0; i < params.total_clerks; i++) {
                if (clerk_busy_until[i] <= current_time && !isPriorityQueueEmpty(queue)) {
                    PriorityItem client = dequeuePriority(queue);
                    double wait_time = current_time - client.arrival_time;
                    
                    if (client.priority == 0) { // VIP
                        if (wait_time > max_vip_wait) max_vip_wait = wait_time;
                        vip_clients_served++;
                    } else { // Normalus
                        total_normal_wait += wait_time;
                        normal_clients_served++;
                    }
                    
                    clerk_busy_until[i] = current_time + client.service_time;
                    
                    if (current_time > SIMULATION_TIME) {
                        results.total_overtime += client.service_time;
                    }
                }
            }
            
            // Išeiti jei darbo laikas baigėsi ir visi aptarnauti
            if (current_time > SIMULATION_TIME && isPriorityQueueEmpty(queue)) {
                break;
            }
        }
        
        // Skaičiuoti rezultatus
        for (int i = 0; i < params.total_clerks; i++) {
            results.total_downtime += fmax(0, SIMULATION_TIME - clerk_busy_until[i]);
        }
        
        if (normal_clients_served > 0) {
            results.avg_normal_wait = total_normal_wait / normal_clients_served;
        }
        results.max_vip_wait = max_vip_wait;
        
        free(clerk_busy_until);
        freePriorityQueue(queue);
    }
    else {
        // Proceso 2 implementacija (atskiros eilės)
        Queue* normal_queue = createQueue(1000);
        Queue* vip_queue = createQueue(1000);
        double* normal_clerks = calloc(params.normal_clerks, sizeof(double));
        double* vip_clerks = calloc(params.vip_clerks, sizeof(double));
        
        double current_time = 0;
        int normal_served = 0;
        double total_normal_wait = 0;
        double max_vip_wait = 0;
        int iterations = 0;

        while (iterations < MAX_ITERATIONS) {
            iterations++;
            
            // Generuoti naujus klientus
            if (current_time <= SIMULATION_TIME) {
                double arrival_interval = exponentialRandom(2.0);
                current_time += arrival_interval;
                
                if (current_time <= SIMULATION_TIME) {
                    if ((rand() / (RAND_MAX + 1.0)) < params.p_normal) {
                        QueueItem normal = {
                            .id = iterations,
                            .arrival_time = current_time,
                            .service_time = exponentialRandom(params.t_normal)
                        };
                        enqueue(normal_queue, normal);
                    } else {
                        QueueItem vip = {
                            .id = iterations,
                            .arrival_time = current_time,
                            .service_time = exponentialRandom(params.t_vip)
                        };
                        enqueue(vip_queue, vip);
                    }
                }
            }
            
            // Aptarnauti VIP klientus
            for (int i = 0; i < params.vip_clerks; i++) {
                if (vip_clerks[i] <= current_time && !isQueueEmpty(vip_queue)) {
                    QueueItem client = dequeue(vip_queue);
                    double wait_time = current_time - client.arrival_time;
                    
                    if (wait_time > max_vip_wait) max_vip_wait = wait_time;
                    vip_clerks[i] = current_time + client.service_time;
                    
                    if (current_time > SIMULATION_TIME) {
                        results.total_overtime += client.service_time;
                    }
                }
            }
            
            // Aptarnauti normalius klientus
            for (int i = 0; i < params.normal_clerks; i++) {
                if (normal_clerks[i] <= current_time && !isQueueEmpty(normal_queue)) {
                    QueueItem client = dequeue(normal_queue);
                    double wait_time = current_time - client.arrival_time;
                    
                    total_normal_wait += wait_time;
                    normal_served++;
                    normal_clerks[i] = current_time + client.service_time;
                    
                    if (current_time > SIMULATION_TIME) {
                        results.total_overtime += client.service_time;
                    }
                }
            }
            
            // Išeiti jei darbo laikas baigėsi ir abi eilės tuščios
            if (current_time > SIMULATION_TIME && isQueueEmpty(normal_queue) && isQueueEmpty(vip_queue)) {
                break;
            }
        }
        
        // Skaičiuoti rezultatus
        for (int i = 0; i < params.normal_clerks; i++) {
            results.total_downtime += fmax(0, SIMULATION_TIME - normal_clerks[i]);
        }
        for (int i = 0; i < params.vip_clerks; i++) {
            results.total_downtime += fmax(0, SIMULATION_TIME - vip_clerks[i]);
        }
        
        if (normal_served > 0) {
            results.avg_normal_wait = total_normal_wait / normal_served;
        }
        results.max_vip_wait = max_vip_wait;
        
        free(normal_clerks);
        free(vip_clerks);
        freeQueue(normal_queue);
        freeQueue(vip_queue);
    }
    
    return results;
}

VIP_bank.h:
#ifndef VIP_BANK_H
#define VIP_BANK_H

#include "queue.h"
#include "priorityQueue.h"

typedef enum { NORMAL_CLIENT, VIP_CLIENT } ClientType;
typedef enum { PROCESS_1, PROCESS_2 } ProcessType;

typedef struct {
    int id;
    ClientType type;
    double arrival_time;
    double service_time;
    double start_time;
    double end_time;
} Client;

typedef struct {
    int total_clerks;
    int normal_clerks;
    int vip_clerks;
    double p_normal;
    double t_normal;
    double t_vip;
} SimulationParams;

typedef struct {
    double total_downtime;
    double total_overtime;
    double avg_normal_wait;
    double max_vip_wait;
} SimulationResults;

SimulationResults runSimulation(ProcessType process, SimulationParams params);

#endif


#include "VIP_bank.h"
#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#include <time.h>
#include <limits.h>

#define SIMULATION_TIME 480  // 8 valandos minutėmis
#define MAX_ITERATIONS 1000000

double exponentialRandom(double mean) {
    double u = (rand() + 1.0) / (RAND_MAX + 2.0);
    return -mean * log(1 - u);
}

SimulationResults runSimulation(ProcessType process, SimulationParams params) {
    srand((unsigned int)time(NULL) ^ (process << 16));
    SimulationResults results = {0};
    
    if (process == PROCESS_1) {
        PriorityQueue* queue = createPriorityQueue(1000);
        double* clerk_busy_until = calloc(params.total_clerks, sizeof(double));
        
        double current_time = 0;
        double next_arrival_time = 0;
        int normal_clients_served = 0;
        int vip_clients_served = 0;
        double total_normal_wait = 0;
        double max_vip_wait = 0;
        int iterations = 0;

        while (iterations < MAX_ITERATIONS) {
            // Generate new client
            if (next_arrival_time <= SIMULATION_TIME) {
                double arrival_interval = exponentialRandom(2.0);
                next_arrival_time += arrival_interval;

                if (next_arrival_time <= SIMULATION_TIME) {
                    if ((rand() / (RAND_MAX + 1.0)) < params.p_normal) {
                        PriorityItem normal = {
                            .id = iterations,
                            .priority = 1,
                            .arrival_time = next_arrival_time,
                            .service_time = exponentialRandom(params.t_normal)
                        };
                        enqueuePriority(queue, normal);
                    } else {
                        PriorityItem vip = {
                            .id = iterations,
                            .priority = 0,
                            .arrival_time = next_arrival_time,
                            .service_time = exponentialRandom(params.t_vip)
                        };
                        enqueuePriority(queue, vip);
                    }
                }
            }

            double next_event_time = INFINITY;
            for (int i = 0; i < params.total_clerks; i++) {
                if (clerk_busy_until[i] < next_event_time) {
                    next_event_time = clerk_busy_until[i];
                }
            }

            if (!isPriorityQueueEmpty(queue)) {
                PriorityItem peek = peekPriority(queue);
                if (peek.arrival_time < next_event_time) {
                    next_event_time = peek.arrival_time;
                }
            }

            if (next_event_time == INFINITY) break;
            current_time = next_event_time;

            // Serve clients
            for (int i = 0; i < params.total_clerks; i++) {
                if (clerk_busy_until[i] <= current_time && !isPriorityQueueEmpty(queue)) {
                    PriorityItem client = dequeuePriority(queue);
                    double wait_time = current_time - client.arrival_time;

                    if (client.priority == 0) {
                        if (wait_time > max_vip_wait) max_vip_wait = wait_time;
                        vip_clients_served++;
                    } else {
                        total_normal_wait += wait_time;
                        normal_clients_served++;
                    }

                    clerk_busy_until[i] = current_time + client.service_time;

                    if (current_time > SIMULATION_TIME) {
                        results.total_overtime += client.service_time;
                    }
                }
            }

            if (next_arrival_time > SIMULATION_TIME && isPriorityQueueEmpty(queue)) {
                break;
            }

            iterations++;
        }

        for (int i = 0; i < params.total_clerks; i++) {
            results.total_downtime += fmax(0, SIMULATION_TIME - clerk_busy_until[i]);
        }

        if (normal_clients_served > 0) {
            results.avg_normal_wait = total_normal_wait / normal_clients_served;
        }
        results.max_vip_wait = max_vip_wait;

        free(clerk_busy_until);
        freePriorityQueue(queue);
    }
    else {
        Queue* normal_queue = createQueue(1000);
        Queue* vip_queue = createQueue(1000);
        double* normal_clerks = calloc(params.normal_clerks, sizeof(double));
        double* vip_clerks = calloc(params.vip_clerks, sizeof(double));

        double current_time = 0;
        double next_arrival_time = 0;
        int normal_served = 0;
        double total_normal_wait = 0;
        double max_vip_wait = 0;
        int iterations = 0;

        while (iterations < MAX_ITERATIONS) {
            if (next_arrival_time <= SIMULATION_TIME) {
                double arrival_interval = exponentialRandom(2.0);
                next_arrival_time += arrival_interval;

                if (next_arrival_time <= SIMULATION_TIME) {
                    if ((rand() / (RAND_MAX + 1.0)) < params.p_normal) {
                        QueueItem normal = {
                            .id = iterations,
                            .arrival_time = next_arrival_time,
                            .service_time = exponentialRandom(params.t_normal)
                        };
                        enqueue(normal_queue, normal);
                    } else {
                        QueueItem vip = {
                            .id = iterations,
                            .arrival_time = next_arrival_time,
                            .service_time = exponentialRandom(params.t_vip)
                        };
                        enqueue(vip_queue, vip);
                    }
                }
            }

            double next_event_time = INFINITY;
            for (int i = 0; i < params.normal_clerks; i++) {
                if (normal_clerks[i] < next_event_time) next_event_time = normal_clerks[i];
            }
            for (int i = 0; i < params.vip_clerks; i++) {
                if (vip_clerks[i] < next_event_time) next_event_time = vip_clerks[i];
            }

            if (!isQueueEmpty(normal_queue)) {
                QueueItem peek = peekQueue(normal_queue);
                if (peek.arrival_time < next_event_time) next_event_time = peek.arrival_time;
            }
            if (!isQueueEmpty(vip_queue)) {
                QueueItem peek = peekQueue(vip_queue);
                if (peek.arrival_time < next_event_time) next_event_time = peek.arrival_time;
            }

            if (next_event_time == INFINITY) break;
            current_time = next_event_time;

            for (int i = 0; i < params.vip_clerks; i++) {
                if (vip_clerks[i] <= current_time && !isQueueEmpty(vip_queue)) {
                    QueueItem client = dequeue(vip_queue);
                    double wait_time = current_time - client.arrival_time;

                    if (wait_time > max_vip_wait) max_vip_wait = wait_time;
                    vip_clerks[i] = current_time + client.service_time;

                    if (current_time > SIMULATION_TIME) {
                        results.total_overtime += client.service_time;
                    }
                }
            }

            for (int i = 0; i < params.normal_clerks; i++) {
                if (normal_clerks[i] <= current_time && !isQueueEmpty(normal_queue)) {
                    QueueItem client = dequeue(normal_queue);
                    double wait_time = current_time - client.arrival_time;

                    total_normal_wait += wait_time;
                    normal_served++;
                    normal_clerks[i] = current_time + client.service_time;

                    if (current_time > SIMULATION_TIME) {
                        results.total_overtime += client.service_time;
                    }
                }
            }

            if (next_arrival_time > SIMULATION_TIME &&
                isQueueEmpty(normal_queue) && isQueueEmpty(vip_queue)) {
                break;
            }

            iterations++;
        }

        for (int i = 0; i < params.normal_clerks; i++) {
            results.total_downtime += fmax(0, SIMULATION_TIME - normal_clerks[i]);
        }
        for (int i = 0; i < params.vip_clerks; i++) {
            results.total_downtime += fmax(0, SIMULATION_TIME - vip_clerks[i]);
        }

        if (normal_served > 0) {
            results.avg_normal_wait = total_normal_wait / normal_served;
        }
        results.max_vip_wait = max_vip_wait;

        free(normal_clerks);
        free(vip_clerks);
        freeQueue(normal_queue);
        freeQueue(vip_queue);
    }

    return results;
}

new main:
#include "queue.h"
#include "priorityQueue.h"
#include <stdio.h>
#include <stdlib.h>
#include <time.h>

#define MAX_CUSTOMERS 1000

// Generate random double in range [0, 1)
double randDouble() {
    return rand() / (RAND_MAX + 1.0);
}

int main() {
    srand((unsigned int)time(NULL));

    int num_customers = 50;
    double prob_vip = 30.0; // 30% chance a customer is VIP
    double avg_service_regular = 5.0;
    double avg_service_vip = 3.0;

    Queue* regularQueue = createQueue(MAX_CUSTOMERS);
    PriorityQueue* vipQueue = createPriorityQueue(MAX_CUSTOMERS);

    int id_counter = 1;

    for (int minute = 0; minute < 60; minute++) {
        if (id_counter > num_customers) break;

        double p = randDouble() * 100;
        double arrival_time = minute;

        if (p < prob_vip) {
            // Add to VIP queue
            PriorityItem vip = { .id = id_counter++, .priority = 0, .arrival_time = arrival_time, .service_time = avg_service_vip };
            enqueuePriority(vipQueue, vip);
            printf("Minute %d: VIP customer %d arrived\n", minute, vip.id);
        } else {
            // Add to regular queue
            QueueItem regular = { .id = id_counter++, .arrival_time = arrival_time, .service_time = avg_service_regular };
            enqueue(regularQueue, regular);
            printf("Minute %d: Regular customer %d arrived\n", minute, regular.id);
        }
    }

    printf("\nServing VIP customers:\n");
    while (!isPriorityQueueEmpty(vipQueue)) {
        PriorityItem vip = dequeuePriority(vipQueue);
        printf("Serving VIP %d (arrived at %.2f, needs %.2f mins)\n", vip.id, vip.arrival_time, vip.service_time);
    }

    printf("\nServing Regular customers:\n");
    while (!isQueueEmpty(regularQueue)) {
        QueueItem reg = dequeue(regularQueue);
        printf("Serving Regular %d (arrived at %.2f, needs %.2f mins)\n", reg.id, reg.arrival_time, reg.service_time);
    }

    freePriorityQueue(vipQueue);
    freeQueue(regularQueue);

    return 0;
}



Minute 0: Regular customer 1 arrived
Minute 1: Regular customer 2 arrived
Minute 2: Regular customer 3 arrived
Minute 3: VIP customer 4 arrived
Minute 4: VIP customer 5 arrived
Minute 5: VIP customer 6 arrived
Minute 6: Regular customer 7 arrived
Minute 7: Regular customer 8 arrived
Minute 8: Regular customer 9 arrived
Minute 9: Regular customer 10 arrived
Minute 10: VIP customer 11 arrived
Minute 11: Regular customer 12 arrived
Minute 12: VIP customer 13 arrived
Minute 13: Regular customer 14 arrived
Minute 14: VIP customer 15 arrived
Minute 15: Regular customer 16 arrived
Minute 16: Regular customer 17 arrived
Minute 17: VIP customer 18 arrived
Minute 18: VIP customer 19 arrived
Minute 19: VIP customer 20 arrived
Minute 20: Regular customer 21 arrived
Minute 21: Regular customer 22 arrived
Minute 22: Regular customer 23 arrived
Minute 23: Regular customer 24 arrived
Minute 24: Regular customer 25 arrived
Minute 25: VIP customer 26 arrived
Minute 26: Regular customer 27 arrived
Minute 27: Regular customer 28 arrived
Minute 28: Regular customer 29 arrived
Minute 29: Regular customer 30 arrived
Minute 30: Regular customer 31 arrived
Minute 31: Regular customer 32 arrived
Minute 32: Regular customer 33 arrived
Minute 33: VIP customer 34 arrived
Minute 34: Regular customer 35 arrived
Minute 35: Regular customer 36 arrived
Minute 36: Regular customer 37 arrived
Minute 37: Regular customer 38 arrived
Minute 38: Regular customer 39 arrived
Minute 39: VIP customer 40 arrived
Minute 40: Regular customer 41 arrived
Minute 41: Regular customer 42 arrived
Minute 42: Regular customer 43 arrived
Minute 43: Regular customer 44 arrived
Minute 44: Regular customer 45 arrived
Minute 45: Regular customer 46 arrived
Minute 46: Regular customer 47 arrived
Minute 47: Regular customer 48 arrived
Minute 48: Regular customer 49 arrived
Minute 49: Regular customer 50 arrived

Serving VIP customers:
Serving VIP 4 (arrived at 3.00, needs 3.00 mins)
Serving VIP 40 (arrived at 39.00, needs 3.00 mins)
Serving VIP 34 (arrived at 33.00, needs 3.00 mins)
Serving VIP 26 (arrived at 25.00, needs 3.00 mins)
Serving VIP 20 (arrived at 19.00, needs 3.00 mins)
Serving VIP 19 (arrived at 18.00, needs 3.00 mins)
Serving VIP 18 (arrived at 17.00, needs 3.00 mins)
Serving VIP 15 (arrived at 14.00, needs 3.00 mins)
Serving VIP 13 (arrived at 12.00, needs 3.00 mins)
Serving VIP 11 (arrived at 10.00, needs 3.00 mins)
Serving VIP 6 (arrived at 5.00, needs 3.00 mins)
Serving VIP 5 (arrived at 4.00, needs 3.00 mins)

Serving Regular customers:
Serving Regular 1 (arrived at 0.00, needs 5.00 mins)
Serving Regular 2 (arrived at 1.00, needs 5.00 mins)
Serving Regular 3 (arrived at 2.00, needs 5.00 mins)
Serving Regular 7 (arrived at 6.00, needs 5.00 mins)
Serving Regular 8 (arrived at 7.00, needs 5.00 mins)
Serving Regular 9 (arrived at 8.00, needs 5.00 mins)
Serving Regular 10 (arrived at 9.00, needs 5.00 mins)
Serving Regular 12 (arrived at 11.00, needs 5.00 mins)
Serving Regular 14 (arrived at 13.00, needs 5.00 mins)
Serving Regular 16 (arrived at 15.00, needs 5.00 mins)
Serving Regular 17 (arrived at 16.00, needs 5.00 mins)
Serving Regular 21 (arrived at 20.00, needs 5.00 mins)
Serving Regular 22 (arrived at 21.00, needs 5.00 mins)
Serving Regular 23 (arrived at 22.00, needs 5.00 mins)
Serving Regular 24 (arrived at 23.00, needs 5.00 mins)
Serving Regular 25 (arrived at 24.00, needs 5.00 mins)
Serving Regular 27 (arrived at 26.00, needs 5.00 mins)
Serving Regular 28 (arrived at 27.00, needs 5.00 mins)
Serving Regular 29 (arrived at 28.00, needs 5.00 mins)
Serving Regular 30 (arrived at 29.00, needs 5.00 mins)
Serving Regular 31 (arrived at 30.00, needs 5.00 mins)
Serving Regular 32 (arrived at 31.00, needs 5.00 mins)
Serving Regular 33 (arrived at 32.00, needs 5.00 mins)
Serving Regular 35 (arrived at 34.00, needs 5.00 mins)
Serving Regular 36 (arrived at 35.00, needs 5.00 mins)
Serving Regular 37 (arrived at 36.00, needs 5.00 mins)
Serving Regular 38 (arrived at 37.00, needs 5.00 mins)
Serving Regular 39 (arrived at 38.00, needs 5.00 mins)
Serving Regular 41 (arrived at 40.00, needs 5.00 mins)
Serving Regular 42 (arrived at 41.00, needs 5.00 mins)
Serving Regular 43 (arrived at 42.00, needs 5.00 mins)
Serving Regular 44 (arrived at 43.00, needs 5.00 mins)
Serving Regular 45 (arrived at 44.00, needs 5.00 mins)
Serving Regular 46 (arrived at 45.00, needs 5.00 mins)
Serving Regular 47 (arrived at 46.00, needs 5.00 mins)
Serving Regular 48 (arrived at 47.00, needs 5.00 mins)
Serving Regular 49 (arrived at 48.00, needs 5.00 mins)
Serving Regular 50 (arrived at 49.00, needs 5.00 mins)
