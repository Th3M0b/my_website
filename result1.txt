>>> Seed set as: 50
*** Launching P1 ***
-- Process 1 Summary --
  Served regular >>> 206
  Served VIP >>> 61
  Idle total: 1790.00 mins
  Overtime sum: 0.00 mins
  Avg reg wait: 0.00 mins
  Max VIP wait: 0.00 mins
  Evaluation score >>> 1790.00

Simulating Process 2...
-- Process 2 Summary --
  Served regular >>> 204
  Served VIP >>> 57
  Idle total: 1816.00 mins
  Overtime sum: 0.00 mins
  Avg reg wait: 0.04 mins
  Max VIP wait: 0.00 mins
  Evaluation score >>> 1816.12

Comparison:
Process 1 is more effective (score: 1790.00)


#include "VIP_bank.h"
#include <string.h>
#include <stdio.h>
#include <stdlib.h>
#include <time.h>

void ReadParamsFromFile(const char* filename, int* num_cashiers_regular, int* num_cashiers_vip,
                        double* prob_regular, double* prob_vip,
                        double* avg_service_regular, double* avg_service_vip,
                        int* workday_minutes) {
    FILE* file = fopen(filename, "r");
    if (!file) {
        printf("Error: Could not open file %s\n", filename);
        exit(1);
    }

    char line[128];
    fgets(line, sizeof(line), file); sscanf(line, "%d", workday_minutes);
    fgets(line, sizeof(line), file); sscanf(line, "%d", num_cashiers_regular);
    fgets(line, sizeof(line), file); sscanf(line, "%d", num_cashiers_vip);
    fgets(line, sizeof(line), file); sscanf(line, "%lf", prob_regular);
    fgets(line, sizeof(line), file); sscanf(line, "%lf", prob_vip);
    fgets(line, sizeof(line), file); sscanf(line, "%lf", avg_service_regular);
    fgets(line, sizeof(line), file); sscanf(line, "%lf", avg_service_vip);

    fclose(file);
}

void inferCfgFromExe(char* exePath, char* outCfgPath, size_t maxLen) {
    const char* filename = exePath;
    for (const char* p = exePath; *p; ++p) {
        if (*p == '\\' || *p == '/') {
            filename = p + 1;
        }
    }

    strncpy(outCfgPath, filename, maxLen - 1);
    outCfgPath[maxLen - 1] = '\0';

    char* dot = strrchr(outCfgPath, '.');
    if (dot && strcmp(dot, ".exe") == 0) {
        strcpy(dot, ".cfg");
    } else {
        strcat(outCfgPath, ".cfg");
    }
}

int main(int argc, char* argv[]) {
    int num_cashiers_regular = 0;
    int num_cashiers_vip = 0;
    double prob_regular = 0;
    double prob_vip = 0;
    double avg_service_regular = 0;
    double avg_service_vip = 0;
    int workday_minutes = 0;
    unsigned int seed = (unsigned int)time(NULL);

    int has_params = 0;

    for (int i = 1; i < argc; i++) {
        if (strcmp(argv[i], "-rnd") == 0 && i + 1 < argc) {
            seed = (unsigned int)atoi(argv[++i]);
        } else if (strstr(argv[i], ".txt") || strstr(argv[i], ".cfg")) {
            ReadParamsFromFile(argv[i], &num_cashiers_regular, &num_cashiers_vip,
                               &prob_regular, &prob_vip,
                               &avg_service_regular, &avg_service_vip,
                               &workday_minutes);
            has_params = 1;
        }
    }

    if (!has_params) {
        char cfgName[FILENAME_MAX];
        inferCfgFromExe(argv[0], cfgName, sizeof(cfgName));

        printf("No parameter file provided, trying: %s\n", cfgName);
        ReadParamsFromFile(cfgName, &num_cashiers_regular, &num_cashiers_vip,
                           &prob_regular, &prob_vip,
                           &avg_service_regular, &avg_service_vip,
                           &workday_minutes);
    }

    if (prob_regular < 0 || prob_regular > 100 || prob_vip < 0 || prob_vip > 100) {
        printf("Error: Probabilities must be between 0 and 100.\n");
        exit(1);
    }

    if (num_cashiers_regular <= 0 || num_cashiers_vip <= 0) {
        printf("Error: Number of cashiers must be greater than 0.\n");
        exit(1);
    }

    srand(seed);
    printf(">>> Seed set as: %u\n", seed);

    // Simulation 1 (PROCESS_1)
    printf("*** Launching Process 1 Simulation ***\n");
    SimulationParams params1 = {
        num_cashiers_regular + num_cashiers_vip,
        num_cashiers_regular,
        num_cashiers_vip,
        prob_regular,
        avg_service_regular,
        avg_service_vip
    };

    SimulationResults result1 = runSimulation(PROCESS_1, params1);

    printf("-- Process 1 Summary --\n");
    printf("  Total downtime: %.2f mins\n", result1.total_downtime);
    printf("  Total overtime: %.2f mins\n", result1.total_overtime);
    printf("  Avg normal wait: %.2f mins\n", result1.avg_normal_wait);
    printf("  Max VIP wait: %.2f mins\n", result1.max_vip_wait);

    // Simulation 2 (PROCESS_2)
    printf("\n*** Launching Process 2 Simulation ***\n");
    SimulationParams params2 = {
        num_cashiers_regular + num_cashiers_vip,
        num_cashiers_regular,
        num_cashiers_vip,
        prob_vip,
        avg_service_regular,
        avg_service_vip
    };

    SimulationResults result2 = runSimulation(PROCESS_2, params2);

    printf("-- Process 2 Summary --\n");
    printf("  Total downtime: %.2f mins\n", result2.total_downtime);
    printf("  Total overtime: %.2f mins\n", result2.total_overtime);
    printf("  Avg normal wait: %.2f mins\n", result2.avg_normal_wait);
    printf("  Max VIP wait: %.2f mins\n", result2.max_vip_wait);

    // Comparison
    printf("\nComparison:\n");
    if (result1.total_overtime < result2.total_overtime) {
        printf("Process 1 is more efficient (lower overtime)\n");
    } else {
        printf("Process 2 is more efficient (lower overtime)\n");
    }

    return 0;
}

-------------------------------------------
#include "VIP_bank.h"
#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#include <time.h>
#include <limits.h>

#define SIMULATION_TIME 480  // 8 valandos minutÄ—mis
#define MAX_ITERATIONS 1000000

double exponentialRandom(double mean) {
    double u = (rand() + 1.0) / (RAND_MAX + 2.0);
    return -mean * log(1 - u);
}

SimulationResults runSimulation(ProcessType process, SimulationParams params) {
    srand((unsigned int)time(NULL) ^ (process << 16));
    SimulationResults results = {0};
    
    if (process == PROCESS_1) {
        PriorityQueue* queue = createPriorityQueue(1000);
        double* clerk_busy_until = calloc(params.total_clerks, sizeof(double));
        
        double current_time = 0;
        double next_arrival_time = 0;
        int normal_clients_served = 0;
        int vip_clients_served = 0;
        double total_normal_wait = 0;
        double max_vip_wait = 0;
        int iterations = 0;

        while (iterations < MAX_ITERATIONS) {
            // Generate new client
            if (next_arrival_time <= SIMULATION_TIME) {
                double arrival_interval = exponentialRandom(2.0);
                next_arrival_time += arrival_interval;

                if (next_arrival_time <= SIMULATION_TIME) {
                    if ((rand() / (RAND_MAX + 1.0)) < params.p_normal) {
                        PriorityItem normal = {
                            .id = iterations,
                            .priority = 1,
                            .arrival_time = next_arrival_time,
                            .service_time = exponentialRandom(params.t_normal)
                        };
                        enqueuePriority(queue, normal);
                    } else {
                        PriorityItem vip = {
                            .id = iterations,
                            .priority = 0,
                            .arrival_time = next_arrival_time,
                            .service_time = exponentialRandom(params.t_vip)
                        };
                        enqueuePriority(queue, vip);
                    }
                }
            }

            double next_event_time = INFINITY;
            for (int i = 0; i < params.total_clerks; i++) {
                if (clerk_busy_until[i] < next_event_time) {
                    next_event_time = clerk_busy_until[i];
                }
            }

            if (!isPriorityQueueEmpty(queue)) {
                PriorityItem peek = peekPriority(queue);
                if (peek.arrival_time < next_event_time) {
                    next_event_time = peek.arrival_time;
                }
            }

            if (next_event_time == INFINITY) break;
            current_time = next_event_time;

            // Serve clients
            for (int i = 0; i < params.total_clerks; i++) {
                if (clerk_busy_until[i] <= current_time && !isPriorityQueueEmpty(queue)) {
                    PriorityItem client = dequeuePriority(queue);
                    double wait_time = current_time - client.arrival_time;

                    if (client.priority == 0) {
                        if (wait_time > max_vip_wait) max_vip_wait = wait_time;
                        vip_clients_served++;
                    } else {
                        total_normal_wait += wait_time;
                        normal_clients_served++;
                    }

                    clerk_busy_until[i] = current_time + client.service_time;

                    if (current_time > SIMULATION_TIME) {
                        results.total_overtime += client.service_time;
                    }
                }
            }

            if (next_arrival_time > SIMULATION_TIME && isPriorityQueueEmpty(queue)) {
                break;
            }

            iterations++;
        }

        for (int i = 0; i < params.total_clerks; i++) {
            results.total_downtime += fmax(0, SIMULATION_TIME - clerk_busy_until[i]);
        }

        if (normal_clients_served > 0) {
            results.avg_normal_wait = total_normal_wait / normal_clients_served;
        }
        results.max_vip_wait = max_vip_wait;

        free(clerk_busy_until);
        freePriorityQueue(queue);
    }
    else {
        Queue* normal_queue = createQueue(1000);
        Queue* vip_queue = createQueue(1000);
        double* normal_clerks = calloc(params.normal_clerks, sizeof(double));
        double* vip_clerks = calloc(params.vip_clerks, sizeof(double));

        double current_time = 0;
        double next_arrival_time = 0;
        int normal_served = 0;
        double total_normal_wait = 0;
        double max_vip_wait = 0;
        int iterations = 0;

        while (iterations < MAX_ITERATIONS) {
            if (next_arrival_time <= SIMULATION_TIME) {
                double arrival_interval = exponentialRandom(2.0);
                next_arrival_time += arrival_interval;

                if (next_arrival_time <= SIMULATION_TIME) {
                    if ((rand() / (RAND_MAX + 1.0)) < params.p_normal) {
                        QueueItem normal = {
                            .id = iterations,
                            .arrival_time = next_arrival_time,
                            .service_time = exponentialRandom(params.t_normal)
                        };
                        enqueue(normal_queue, normal);
                    } else {
                        QueueItem vip = {
                            .id = iterations,
                            .arrival_time = next_arrival_time,
                            .service_time = exponentialRandom(params.t_vip)
                        };
                        enqueue(vip_queue, vip);
                    }
                }
            }

            double next_event_time = INFINITY;
            for (int i = 0; i < params.normal_clerks; i++) {
                if (normal_clerks[i] < next_event_time) next_event_time = normal_clerks[i];
            }
            for (int i = 0; i < params.vip_clerks; i++) {
                if (vip_clerks[i] < next_event_time) next_event_time = vip_clerks[i];
            }

            if (!isQueueEmpty(normal_queue)) {
                QueueItem peek = peekQueue(normal_queue);
                if (peek.arrival_time < next_event_time) next_event_time = peek.arrival_time;
            }
            if (!isQueueEmpty(vip_queue)) {
                QueueItem peek = peekQueue(vip_queue);
                if (peek.arrival_time < next_event_time) next_event_time = peek.arrival_time;
            }

            if (next_event_time == INFINITY) break;
            current_time = next_event_time;

            for (int i = 0; i < params.vip_clerks; i++) {
                if (vip_clerks[i] <= current_time && !isQueueEmpty(vip_queue)) {
                    QueueItem client = dequeue(vip_queue);
                    double wait_time = current_time - client.arrival_time;

                    if (wait_time > max_vip_wait) max_vip_wait = wait_time;
                    vip_clerks[i] = current_time + client.service_time;

                    if (current_time > SIMULATION_TIME) {
                        results.total_overtime += client.service_time;
                    }
                }
            }

            for (int i = 0; i < params.normal_clerks; i++) {
                if (normal_clerks[i] <= current_time && !isQueueEmpty(normal_queue)) {
                    QueueItem client = dequeue(normal_queue);
                    double wait_time = current_time - client.arrival_time;

                    total_normal_wait += wait_time;
                    normal_served++;
                    normal_clerks[i] = current_time + client.service_time;

                    if (current_time > SIMULATION_TIME) {
                        results.total_overtime += client.service_time;
                    }
                }
            }

            if (next_arrival_time > SIMULATION_TIME &&
                isQueueEmpty(normal_queue) && isQueueEmpty(vip_queue)) {
                break;
            }

            iterations++;
        }

        for (int i = 0; i < params.normal_clerks; i++) {
            results.total_downtime += fmax(0, SIMULATION_TIME - normal_clerks[i]);
        }
        for (int i = 0; i < params.vip_clerks; i++) {
            results.total_downtime += fmax(0, SIMULATION_TIME - vip_clerks[i]);
        }

        if (normal_served > 0) {
            results.avg_normal_wait = total_normal_wait / normal_served;
        }
        results.max_vip_wait = max_vip_wait;

        free(normal_clerks);
        free(vip_clerks);
        freeQueue(normal_queue);
        freeQueue(vip_queue);
    }

    return results;
}
